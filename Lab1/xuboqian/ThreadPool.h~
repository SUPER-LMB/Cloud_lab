<<<<<<< HEAD
#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <pthread.h>

//任务接口(节点)
/*struct Work {
    void* (*func) (void *arg);
    void *arg;
    Work *next;
};

//线程池中线程执行的回掉函数
void* thread_poll_func(void *arg);

//线程池
struct thread_poll{
    //任务队列
    Work *head;
    //线程指针
    pthread_t *pd;

    //条件变量和锁
    pthread_mutex_t mutex;
    pthread_cond_t cond;

    //线程池是否被销毁
    bool shutdown;

    //线程池中线程的总量
    int pthread_num;
    //当前任务队列中任务数量
    int work_num;

    //初始化函数
    thread_poll(int pthread_num) {
        this -> pthread_num = pthread_num;
        this -> work_num = 0;
        this -> shutdown = 0;
        pthread_mutex_init(&this ->mutex, NULL);
        pthread_cond_init(&this -> cond, NULL);
        this -> head = NULL;
        pd = (pthread_t *)malloc(sizeof(pthread_t) * pthread_num);
        for (int i = 0; i < pthread_num; i++) {
            pthread_create(&this -> pd[i], NULL, thread_poll_func, this);
        }
    }

    //向线程池投递任务
    void add_work(Work *work);

    //销毁线程池
    int del();
};*/struct job
{
    void* (*callback_function)(void *arg);    //线程回调函数
    void *arg;                                //回调函数参数
    struct job *next;
};

struct threadpool
{
    int thread_num;                   //线程池中开启线程的个数
    int queue_max_num;                //队列中最大job的个数
    struct job *head;                 //指向job的头指针
    struct job *tail;                 //指向job的尾指针
    pthread_t *pthreads;              //线程池中所有线程的pthread_t
    pthread_mutex_t mutex;            //互斥信号量
    pthread_cond_t queue_empty;       //队列为空的条件变量
    pthread_cond_t queue_not_empty;   //队列不为空的条件变量
    pthread_cond_t queue_not_full;    //队列不为满的条件变量
    int queue_cur_num;                //队列当前的job个数
    int queue_close;                  //队列是否已经关闭
    int pool_close;                   //线程池是否已经关闭
};

//================================================================================================
//函数名：                   threadpool_init
//函数描述：                 初始化线程池
//输入：                    [in] thread_num     线程池开启的线程个数
//                         [in] queue_max_num  队列的最大job个数 
//输出：                    无
//返回：                    成功：线程池地址 失败：NULL
//================================================================================================
struct threadpool* threadpool_init(int thread_num, int queue_max_num);

//================================================================================================
//函数名：                    threadpool_add_job
//函数描述：                  向线程池中添加任务
//输入：                     [in] pool                  线程池地址
//                          [in] callback_function     回调函数
//                          [in] arg                     回调函数参数
//输出：                     无
//返回：                     成功：0 失败：-1
//================================================================================================
int threadpool_add_job(struct threadpool *pool, void* (*callback_function)(void *arg), void *arg);

//================================================================================================
//函数名：                    threadpool_destroy
//函数描述：                   销毁线程池
//输入：                      [in] pool                  线程池地址
//输出：                      无
//返回：                      成功：0 失败：-1
//================================================================================================
int threadpool_destroy(struct threadpool *pool);

//================================================================================================
//函数名：                    threadpool_function
//函数描述：                  线程池中线程函数
//输入：                     [in] arg                  线程池地址
//输出：                     无  
//返回：                     无
//================================================================================================
void* threadpool_function(void* arg);


=======
#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <pthread.h>

//任务接口(节点)
/*struct Work {
    void* (*func) (void *arg);
    void *arg;
    Work *next;
};

//线程池中线程执行的回掉函数
void* thread_poll_func(void *arg);

//线程池
struct thread_poll{
    //任务队列
    Work *head;
    //线程指针
    pthread_t *pd;

    //条件变量和锁
    pthread_mutex_t mutex;
    pthread_cond_t cond;

    //线程池是否被销毁
    bool shutdown;

    //线程池中线程的总量
    int pthread_num;
    //当前任务队列中任务数量
    int work_num;

    //初始化函数
    thread_poll(int pthread_num) {
        this -> pthread_num = pthread_num;
        this -> work_num = 0;
        this -> shutdown = 0;
        pthread_mutex_init(&this ->mutex, NULL);
        pthread_cond_init(&this -> cond, NULL);
        this -> head = NULL;
        pd = (pthread_t *)malloc(sizeof(pthread_t) * pthread_num);
        for (int i = 0; i < pthread_num; i++) {
            pthread_create(&this -> pd[i], NULL, thread_poll_func, this);
        }
    }

    //向线程池投递任务
    void add_work(Work *work);

    //销毁线程池
    int del();
};*/struct job
{
    void* (*callback_function)(void *arg);    //线程回调函数
    void *arg;                                //回调函数参数
    struct job *next;
};

struct threadpool
{
    int thread_num;                   //线程池中开启线程的个数
    int queue_max_num;                //队列中最大job的个数
    struct job *head;                 //指向job的头指针
    struct job *tail;                 //指向job的尾指针
    pthread_t *pthreads;              //线程池中所有线程的pthread_t
    pthread_mutex_t mutex;            //互斥信号量
    pthread_cond_t queue_empty;       //队列为空的条件变量
    pthread_cond_t queue_not_empty;   //队列不为空的条件变量
    pthread_cond_t queue_not_full;    //队列不为满的条件变量
    int queue_cur_num;                //队列当前的job个数
    int queue_close;                  //队列是否已经关闭
    int pool_close;                   //线程池是否已经关闭
};

//================================================================================================
//函数名：                   threadpool_init
//函数描述：                 初始化线程池
//输入：                    [in] thread_num     线程池开启的线程个数
//                         [in] queue_max_num  队列的最大job个数 
//输出：                    无
//返回：                    成功：线程池地址 失败：NULL
//================================================================================================
struct threadpool* threadpool_init(int thread_num, int queue_max_num);

//================================================================================================
//函数名：                    threadpool_add_job
//函数描述：                  向线程池中添加任务
//输入：                     [in] pool                  线程池地址
//                          [in] callback_function     回调函数
//                          [in] arg                     回调函数参数
//输出：                     无
//返回：                     成功：0 失败：-1
//================================================================================================
int threadpool_add_job(struct threadpool *pool, void* (*callback_function)(void *arg), void *arg);

//================================================================================================
//函数名：                    threadpool_destroy
//函数描述：                   销毁线程池
//输入：                      [in] pool                  线程池地址
//输出：                      无
//返回：                      成功：0 失败：-1
//================================================================================================
int threadpool_destroy(struct threadpool *pool);

//================================================================================================
//函数名：                    threadpool_function
//函数描述：                  线程池中线程函数
//输入：                     [in] arg                  线程池地址
//输出：                     无  
//返回：                     无
//================================================================================================
void* threadpool_function(void* arg);


>>>>>>> fe7e21d... Add files via upload
